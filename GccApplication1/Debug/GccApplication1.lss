
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000916  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078a  00000000  00000000  00000cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046a  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000156  00000000  00000000  00001e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001fb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  88:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ISR_Init>:

#include "ISR.h"
int ms_count = 0;

void ISR_Init(void){
	TCCR2B |= (1<<WGM21);
  90:	e1 eb       	ldi	r30, 0xB1	; 177
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 60       	ori	r24, 0x02	; 2
  98:	80 83       	st	Z, r24
	//CTC모드 ON (dataSheet 109p 참고)
	TCCR2B |= (1<<CS22);
  9a:	80 81       	ld	r24, Z
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	80 83       	st	Z, r24
	//prescaler 설정
	OCR2A = 249;
  a0:	89 ef       	ldi	r24, 0xF9	; 249
  a2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	//TOP 설정
	TIMSK2 |= (1<<OCIE2A);
  a6:	e0 e7       	ldi	r30, 0x70	; 112
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	sei();
  b0:	78 94       	sei
  b2:	08 95       	ret

000000b4 <__vector_7>:
}

ISR(TIMER2_COMPA_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
	ms_count++;
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(ms_count%1==0){
		task_1ms();
  e8:	0e 94 b3 00 	call	0x166	; 0x166 <task_1ms>
	else
	{
		//do nothing
	}
	
	if(ms_count%60==0){
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	6c e3       	ldi	r22, 0x3C	; 60
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <__divmodhi4>
  fc:	89 2b       	or	r24, r25
  fe:	11 f4       	brne	.+4      	; 0x104 <__vector_7+0x50>
		task_60ms();
 100:	0e 94 b4 00 	call	0x168	; 0x168 <task_60ms>
	else
	{
		//do nothing
	}

	if(ms_count%500==0){
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	64 ef       	ldi	r22, 0xF4	; 244
 10e:	71 e0       	ldi	r23, 0x01	; 1
 110:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <__divmodhi4>
 114:	89 2b       	or	r24, r25
 116:	11 f4       	brne	.+4      	; 0x11c <__vector_7+0x68>
		task_1000ms();
 118:	0e 94 c1 00 	call	0x182	; 0x182 <task_1000ms>
	else
	{
		//do nothing
	}
	
	if(ms_count%1000==0){
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 124:	68 ee       	ldi	r22, 0xE8	; 232
 126:	73 e0       	ldi	r23, 0x03	; 3
 128:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <__divmodhi4>
 12c:	89 2b       	or	r24, r25
 12e:	11 f4       	brne	.+4      	; 0x134 <__vector_7+0x80>
		task_2000ms();
 130:	0e 94 c2 00 	call	0x184	; 0x184 <task_2000ms>
	}
	else
	{
		//do nothing
	}
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <main>:
 156:	0e 94 48 00 	call	0x90	; 0x90 <ISR_Init>
 15a:	0e 94 c3 00 	call	0x186	; 0x186 <ADC_Init>
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	80 62       	ori	r24, 0x20	; 32
 162:	84 b9       	out	0x04, r24	; 4
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0xe>

00000166 <task_1ms>:
 166:	08 95       	ret

00000168 <task_60ms>:
 168:	0e 94 cf 00 	call	0x19e	; 0x19e <ADC_GetValue>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	92 40       	sbci	r25, 0x02	; 2
 170:	20 f0       	brcs	.+8      	; 0x17a <task_60ms+0x12>
 172:	85 b1       	in	r24, 0x05	; 5
 174:	80 62       	ori	r24, 0x20	; 32
 176:	85 b9       	out	0x05, r24	; 5
 178:	08 95       	ret
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	8f 7d       	andi	r24, 0xDF	; 223
 17e:	85 b9       	out	0x05, r24	; 5
 180:	08 95       	ret

00000182 <task_1000ms>:
 182:	08 95       	ret

00000184 <task_2000ms>:
 184:	08 95       	ret

00000186 <ADC_Init>:
 186:	85 e4       	ldi	r24, 0x45	; 69
 188:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 18c:	ea e7       	ldi	r30, 0x7A	; 122
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	8e e8       	ldi	r24, 0x8E	; 142
 192:	80 83       	st	Z, r24
 194:	78 94       	sei
 196:	80 81       	ld	r24, Z
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <ADC_GetValue>:
 19e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_value>
 1a2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_value+0x1>
 1a6:	08 95       	ret

000001a8 <__vector_21>:
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
 1ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <adc_value+0x1>
 1c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value>
 1ca:	ea e7       	ldi	r30, 0x7A	; 122
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 83       	st	Z, r24
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__divmodhi4>:
 1e6:	97 fb       	bst	r25, 7
 1e8:	07 2e       	mov	r0, r23
 1ea:	16 f4       	brtc	.+4      	; 0x1f0 <__divmodhi4+0xa>
 1ec:	00 94       	com	r0
 1ee:	07 d0       	rcall	.+14     	; 0x1fe <__divmodhi4_neg1>
 1f0:	77 fd       	sbrc	r23, 7
 1f2:	09 d0       	rcall	.+18     	; 0x206 <__divmodhi4_neg2>
 1f4:	0e 94 07 01 	call	0x20e	; 0x20e <__udivmodhi4>
 1f8:	07 fc       	sbrc	r0, 7
 1fa:	05 d0       	rcall	.+10     	; 0x206 <__divmodhi4_neg2>
 1fc:	3e f4       	brtc	.+14     	; 0x20c <__divmodhi4_exit>

000001fe <__divmodhi4_neg1>:
 1fe:	90 95       	com	r25
 200:	81 95       	neg	r24
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	08 95       	ret

00000206 <__divmodhi4_neg2>:
 206:	70 95       	com	r23
 208:	61 95       	neg	r22
 20a:	7f 4f       	sbci	r23, 0xFF	; 255

0000020c <__divmodhi4_exit>:
 20c:	08 95       	ret

0000020e <__udivmodhi4>:
 20e:	aa 1b       	sub	r26, r26
 210:	bb 1b       	sub	r27, r27
 212:	51 e1       	ldi	r21, 0x11	; 17
 214:	07 c0       	rjmp	.+14     	; 0x224 <__udivmodhi4_ep>

00000216 <__udivmodhi4_loop>:
 216:	aa 1f       	adc	r26, r26
 218:	bb 1f       	adc	r27, r27
 21a:	a6 17       	cp	r26, r22
 21c:	b7 07       	cpc	r27, r23
 21e:	10 f0       	brcs	.+4      	; 0x224 <__udivmodhi4_ep>
 220:	a6 1b       	sub	r26, r22
 222:	b7 0b       	sbc	r27, r23

00000224 <__udivmodhi4_ep>:
 224:	88 1f       	adc	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	5a 95       	dec	r21
 22a:	a9 f7       	brne	.-22     	; 0x216 <__udivmodhi4_loop>
 22c:	80 95       	com	r24
 22e:	90 95       	com	r25
 230:	bc 01       	movw	r22, r24
 232:	cd 01       	movw	r24, r26
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
