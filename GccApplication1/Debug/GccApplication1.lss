
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000802  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c8  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000340  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000412  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  88:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ISR_Init>:

#include "ISR.h"
int ms_count = 0;

void ISR_Init(void){
	TCCR1B |= (1<<WGM12);
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 60       	ori	r24, 0x08	; 8
  98:	80 83       	st	Z, r24
	//CTC모드 ON (dataSheet 109p 참고)
	TCCR1B |= (1<<CS11) | (1<<CS10);
  9a:	80 81       	ld	r24, Z
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	80 83       	st	Z, r24
	//prescaler 설정
	OCR1A = 255;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	//TOP 설정
	TIMSK1 |= (1<<OCIE1A);
  ac:	ef e6       	ldi	r30, 0x6F	; 111
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
	sei();
  b6:	78 94       	sei
  b8:	08 95       	ret

000000ba <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	ms_count++;
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(ms_count%1==0){
		task_1ms();
  ee:	0e 94 b4 00 	call	0x168	; 0x168 <task_1ms>
	else
	{
		//do nothing
	}
	
	if(ms_count%60==0){
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fa:	6c e3       	ldi	r22, 0x3C	; 60
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	0e 94 be 00 	call	0x17c	; 0x17c <__divmodhi4>
 102:	89 2b       	or	r24, r25
 104:	11 f4       	brne	.+4      	; 0x10a <__vector_11+0x50>
		task_60ms();
 106:	0e 94 b5 00 	call	0x16a	; 0x16a <task_60ms>
	else
	{
		//do nothing
	}

	if(ms_count%500==0){
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	64 ef       	ldi	r22, 0xF4	; 244
 114:	71 e0       	ldi	r23, 0x01	; 1
 116:	0e 94 be 00 	call	0x17c	; 0x17c <__divmodhi4>
 11a:	89 2b       	or	r24, r25
 11c:	11 f4       	brne	.+4      	; 0x122 <__vector_11+0x68>
		task_1000ms();
 11e:	0e 94 b6 00 	call	0x16c	; 0x16c <task_1000ms>
	else
	{
		//do nothing
	}
	
	if(ms_count%1000==0){
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	68 ee       	ldi	r22, 0xE8	; 232
 12c:	73 e0       	ldi	r23, 0x03	; 3
 12e:	0e 94 be 00 	call	0x17c	; 0x17c <__divmodhi4>
 132:	89 2b       	or	r24, r25
 134:	11 f4       	brne	.+4      	; 0x13a <__vector_11+0x80>
		task_2000ms();
 136:	0e 94 ba 00 	call	0x174	; 0x174 <task_2000ms>
	}
	else
	{
		//do nothing
	}
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:
 15c:	0e 94 48 00 	call	0x90	; 0x90 <ISR_Init>
 160:	84 b1       	in	r24, 0x04	; 4
 162:	80 62       	ori	r24, 0x20	; 32
 164:	84 b9       	out	0x04, r24	; 4
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0xa>

00000168 <task_1ms>:
 168:	08 95       	ret

0000016a <task_60ms>:
 16a:	08 95       	ret

0000016c <task_1000ms>:
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	85 b9       	out	0x05, r24	; 5
 172:	08 95       	ret

00000174 <task_2000ms>:
 174:	85 b1       	in	r24, 0x05	; 5
 176:	8f 7d       	andi	r24, 0xDF	; 223
 178:	85 b9       	out	0x05, r24	; 5
 17a:	08 95       	ret

0000017c <__divmodhi4>:
 17c:	97 fb       	bst	r25, 7
 17e:	07 2e       	mov	r0, r23
 180:	16 f4       	brtc	.+4      	; 0x186 <__divmodhi4+0xa>
 182:	00 94       	com	r0
 184:	07 d0       	rcall	.+14     	; 0x194 <__divmodhi4_neg1>
 186:	77 fd       	sbrc	r23, 7
 188:	09 d0       	rcall	.+18     	; 0x19c <__divmodhi4_neg2>
 18a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodhi4>
 18e:	07 fc       	sbrc	r0, 7
 190:	05 d0       	rcall	.+10     	; 0x19c <__divmodhi4_neg2>
 192:	3e f4       	brtc	.+14     	; 0x1a2 <__divmodhi4_exit>

00000194 <__divmodhi4_neg1>:
 194:	90 95       	com	r25
 196:	81 95       	neg	r24
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	08 95       	ret

0000019c <__divmodhi4_neg2>:
 19c:	70 95       	com	r23
 19e:	61 95       	neg	r22
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255

000001a2 <__divmodhi4_exit>:
 1a2:	08 95       	ret

000001a4 <__udivmodhi4>:
 1a4:	aa 1b       	sub	r26, r26
 1a6:	bb 1b       	sub	r27, r27
 1a8:	51 e1       	ldi	r21, 0x11	; 17
 1aa:	07 c0       	rjmp	.+14     	; 0x1ba <__udivmodhi4_ep>

000001ac <__udivmodhi4_loop>:
 1ac:	aa 1f       	adc	r26, r26
 1ae:	bb 1f       	adc	r27, r27
 1b0:	a6 17       	cp	r26, r22
 1b2:	b7 07       	cpc	r27, r23
 1b4:	10 f0       	brcs	.+4      	; 0x1ba <__udivmodhi4_ep>
 1b6:	a6 1b       	sub	r26, r22
 1b8:	b7 0b       	sbc	r27, r23

000001ba <__udivmodhi4_ep>:
 1ba:	88 1f       	adc	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	5a 95       	dec	r21
 1c0:	a9 f7       	brne	.-22     	; 0x1ac <__udivmodhi4_loop>
 1c2:	80 95       	com	r24
 1c4:	90 95       	com	r25
 1c6:	bc 01       	movw	r22, r24
 1c8:	cd 01       	movw	r24, r26
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
